---
format: 
  revealjs:
    theme: ["theme/theme.scss"]
    slide-number: c/t
    logo: "images/Ricardo_RGB_Inline.png"
    # footer: "[https://jthomasmock.github.io/arrow-dplyr](https://jthomasmock.github.io/arrow-dplyr)"
    code-copy: true
    center-title-slide: false
    # include-in-header: heading-meta.html
    code-link: true
    code-overflow: wrap
    code-line-numbers: false
    highlight-style: a11y
    height: 1080
    width: 1920
execute: 
  eval: true
  echo: true
  freeze: auto
---

```{r}
#| label: pkg
#| include: false
library(openair)
library(openairmaps)
```

## {background-color="white" background-image="images/background.png"}

<h1> "Put it on a map!" </h1>

<h2> Developments in Air Quality Data Analysis </h2>

<p>Dr Jack Davison, AQ Data Analyst</p>
<p>Ricardo Energy & Environment</p>

<p> April 2023 </p>
<br>

<h3> `r fontawesome::fa("github", "black")` &nbsp; [github.com/jack-davison](https://github.com/jack-davison)

<h3> `r fontawesome::fa("twitter", "black")` &nbsp; [twitter.com/JDavison_](https://twitter.com/JDavison_)

<h3> `r fontawesome::fa("linkedin", "black")` &nbsp; [linkedin.com/in/jack-davison/](https://www.linkedin.com/in/jack-davison/)

## What do we mean by "air quality"?
<hr>

![](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/image_data/file/81099/sources-100.jpg){fig-align="center"}

::: footer
Source: [UKHSA](https://www.gov.uk/government/publications/health-matters-air-pollution/health-matters-air-pollution)
:::


## Why do we care?
<hr>

![](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/image_data/file/81010/Infographic_on_the_scale_of_the_problem_with_air_pollution.jpg){fig-align="center"}

::: footer
Source: [UKHSA](https://www.gov.uk/government/publications/health-matters-air-pollution/health-matters-air-pollution)
:::

## Air quality at Ricardo

<hr>

:::: {.columns}

::: {.column width="30%"}
![](images/ric_aq_meas.png)

<h4>Measurements</h4>

Monitor the air to understand compliance with regulatory limits, and design effective actions to reduce impacts on public health & the environment.

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
:::{.fragment}
![](images/ric_aq_mod.png)

<h4>Modelling</h4>

Local scale "dispersion modelling" assessments in support of planning or permitting requirements through to national scale modelling
:::
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
:::{.fragment}
![](images/ric_aq_inv.png)

<h4>Inventories</h4>

Providing a comprehensive understanding of national emissions data and key sources, in addition to expert interpretation and advice.
:::
:::

::::

::: footer
<https://www.ricardo.com/en>
:::


## My role
<hr>

I am an "air quality data measurements analyst", but in reality I do a lot of stuff!

> As an overall summary, my work is centred around leveraging R to more effectively communicate air quality data to the public.

* Authoring "annual reports" in Quarto for different networks, as well as ad-hoc reports (e.g., "episode" reports).

* Performing data analysis and creating data visualisations across many different projects.

* Developing new tools to better analyse/visualise data (e.g., `{openair}`, `{openairmaps}`, `{worldmet}`, ...).

. . .

* Facilitate internal & external training to allow others to better understand their own data.

![](images/training-logos.png){width=80% fig-align="center"}

::: footer
<https://emaq.ricardo.com/>
:::

## Measuring air quality
<hr>

The UK has *a lot* of air quality measurement sites! We use these to track national compliance with AQ objectives, as well as to inform more local-scale policies.

<br>

:::aside
Note that this doesn't even cover the non-automatic networks (e.g., heavy metals) or the non-national networks operated by local authorities!
:::

:::footer
<https://uk-air.defra.gov.uk/networks/>
:::

```{r}
#| label: networkMap
#| out-width: "100%"
#| out-height: "600"
openairmaps::networkMap(c("aurn", "aqe", "waqn", "saqn", "ni"), cluster = FALSE)
```

## Dynamic Reporting
<hr>

We create *a lot* of dynamic reports using `{rmarkdown}` (although we're slowly transitioning to [Quarto](https://quarto.org)!).

:::: {.columns}

::: {.column width="40%"}
* Air quality data lends itself to **automatic** reporting as it:

1. ...is always in a consistent format (date, pollutant concentrations).

2. ...is added to our databases continuously after ratification.

* We also create ad-hoc reports in response to pollution "episodes" (particulate matter episodes on bonfire night, ozone episodes during heatwaves, etc.).
:::

::: {.column width="60%"}
[![](images/west-london-screenshot.png)](https://www.ricardo.com/media/c33dncxa/west-london-particulate-episode.html)

:::

::::

Dynamic reports are an excellent middle ground between traditional reports and data dashboards, providing a strong narrative *and* extensibility.

:::footer
[West London Particulate Episode Report](https://www.ricardo.com/media/c33dncxa/west-london-particulate-episode.html)
:::

## The `{openair}` package
<hr>

> `{openair}` is an R package developed for the purpose of analysing air quality data â€” or more generally atmospheric composition data. The package is extensively used in academia, the public and private sectors.

It has been around for *a long* time --- over a decade! This means some things are a bit odd for newer R users (e.g., use of `{lattice}` over `{ggplot2}`!). Key question - how can we best leverage it in this rapidly developing world of R programming?

::::{.columns}

:::{.column width="45%"}

```{r}
#| label: fig-calendarplot
#| fig-cap: "A 'calendar plot' - a heatmap in a familiar calendar format."
#| echo: false
openair::calendarPlot(openair::mydata, year = 2000)
```

:::

:::{.column width="10%"}
:::

:::{.column width="45%"}

```{r}
#| label: fig-theilsen
#| fig-cap: "A 'Theil Sen trend' - a robust trend fit to a timeseries."
#| message: false
#| warning: false
#| echo: false
openair::TheilSen(openair::mydata, avg.time = "month")
```

:::

::::

:::footer
<https://github.com/davidcarslaw/openair>
:::

## `{openair}` aside: accessing data
<hr>

Even if you don't really care about air quality, `{openair}` (and `{worldmet}`) can still be useful to you as they provide access to *lots* of timeseries data!

```{r}
#| label: loaddata
library(openair)
london_data <- importAURN(c("my1", "kc1"), year = 2022, meta = TRUE)
london_data
```

::: footer
<https://bookdown.org/david_carslaw/openair/UK-air-quality-data.html>
:::

## Directional analysis I
<hr>

Answers the question *"where is the pollution coming from?"* ^[As opposed to "trend analysis", *"how are concentrations changing?"*]
<br>

::::{.columns}

:::{.column width="45%"}
```{r}
#| label: fig-windrose
#| fig-cap: "Wind speed & direction"
#| fig-height: 6
openair::windRose(openair::mydata)
```
:::

:::{.column width="10%"}
:::

:::{.column width="45%"}

:::{.fragment}

```{r}
#| label: fig-pollrose
#| fig-cap: "Wind dir. & concentration"
#| fig-height: 6
openair::pollutionRose(openair::mydata, "nox")
```

:::

:::

::::


## Directional analysis II
<hr>

Answers the question *"where is the pollution coming from?"* ^[As opposed to "trend analysis", *"how are concentrations changing?"*]
<br>

::::{.columns}

:::{.column width="45%"}
```{r}
#| label: fig-polarFreq
#| fig-cap: "Wind speed, direction & concentration, binned."
#| fig-height: 6
openair::polarFreq(openair::mydata, "nox", "mean", trans = FALSE)
```
:::

:::{.column width="10%"}
:::

:::{.column width="45%"}

:::{.fragment}

```{r}
#| label: fig-polarPlot
#| fig-cap: "Wind speed, direction & concentration, smoothed."
#| fig-height: 6
openair::polarPlot(openair::mydata, "nox")
```

:::

:::

::::

## Enter `{openairmaps}`

> Part of the wider "openair toolkit" along with `{openair}`, `{worldmet}` and `{deweather}`.

The purpose of `{openairmaps}` was to combine `{openair}`'s directional analysis with the `{leaflet}` package (& javascript library) to create interactive air quality maps that help us **triangulate pollution sources** and understand local air quality in its **geographical context**.

```{r}
#| label: centralLondon
#| out-width: "100%"
#| out-height: "500"
openairmaps::polarMap(openairmaps::polar_data, "nox", popup = "site", d.icon = 300, alpha = 3/4)
```

## Package Development
<hr>

Once I got started, I was hooked! Every time you *think* you're done, you're dragged back in to expand on the functionality further.

![](images/timeline.svg){width=100%}

. . .

Being in the position to *teach* the package also allows a developer to understand what users are actually interested in.

<!-- %%{init: { 'logLevel': 'debug', 'theme': 'dark', 'timeline': {'disableMulticolor': true}}}%% -->

<!-- timeline -->
<!--     Pre-release : `polarMap()` -->
<!--     v0.4 : `polarMap()` Family -->
<!--          : `trajMap()` Family -->
<!--          : `networkMap()` -->
<!--     v0.5 : Popups & labels -->
<!--          : Arbitrary Control Menus -->
<!--     v0.6 : Shared marker scales -->
<!--          : Multi-network visualisation -->
<!--     v0.7 : Static polar maps -->
<!--          : `diffMap()` -->
<!--          : Map transparency -->
<!--     v0.8 : Static trajectory maps -->
<!--          : Popup/control QOL -->

::: {.footer}
[{openairmaps} news](https://github.com/davidcarslaw/openairmaps/blob/master/NEWS.md)
:::


## Case Study: Trends Over Lockdown
<hr>

Once nice use of the easy layer control options is to view changes over time. For example, we can clearly see the huge impact of the COVID-19 lockdown in Oxford City Centre!

```{r}
#| label: layercontrol
#| out-width: "100%"
#| out-height: "650"
oxford_road <- importAURN(site = "OX", year = 2018:2022, meta = TRUE)
polarMap(oxford_road, "nox", # data, pollutant
         control = "year", # create control menu for the year
         upper = 20, limits = c(0, 250), # set limits so markers share them
         alpha = 3/4) # semi-transparency
```

## Case Study: Source Apportionment
<hr>

If we have a whole network of sites, we can triangulate potential sources. For example, where are likely sources in a nearby industrial site?

```{r}
#| label: nlincs
#| output-location: column
#| out-width: "100%"
#| out-height: "550"
library(dplyr)

# get data
nlincs_local <- importLocal(
  c("SCN6", "SC12", "SC10", "AMVL"), 
  year = 2021, meta = TRUE
)
nlincs_aurn <- importAURN(
  c("SCN2"), 
  year = 2021, meta = TRUE
)

# combine
nlincs_all <- dplyr::bind_rows(
  nlincs_local, nlincs_aurn
)

# reuse modelled met for local data
nlincs_all <-
  nlincs_all %>%
  select(-ws, -wd, -air_temp) %>%
  left_join(
    select(nlincs_aurn, date, ws:air_temp), 
    by = join_by(date)
  )

# polar plot map!
polarMap(
  nlincs_all, "pm10", alpha = 3 / 4,
  # use multiple providers
  provider = c("OpenStreetMap", "Esri.WorldImagery")
)
```

::: {.footer}
This is a surface-level analysis of a complex air quality situation - please do not draw any lasting conclusions about Scunthorpe from this map!
:::
## How does this work under the hood?
<hr>

:::: {.columns}

::: {.column width="27%"}
`leaflet::makeIcon()` function can create `{leaflet}` markers out of effectively any image. 

We save the `{openair}` plots in a temporary directory first, and then point `makeIcon()` at these images. 

Everything is contained in a nested dataframe so everything remains properly aligned!
:::

::: {.column width="3%"}
:::

::: {.column width="70%"}
![](images/flowchart.png){height=800}
:::

::::

```{r}
#| label: dummy
#| include: false
# flowchart LR
#     subgraph dataframe[Air Quality Dataframe]
#     alt[AQ Data] -->|nest by\nlat/lng/control| nested[Nested\nAQ Data]
#     nested -->|has columns| latlng[Lat. & Lng.]
#     nested -->|has column| control
#     nested -->|has column| data
#     nested -->|has columns| popup/label
#     latlng -->|forms| paths
#     control -->|forms| paths
#     data -->|creates| plots
#     plots -->|saved to| paths
#     end
#     subgraph leaf[Leaflet Map]
#     leaflet -->|%>%| addTiles
#     addTiles -->|%>%| addMarkers
#     leaflet -.->|data =| nested
#     addMarkers -.->|iconURL =| paths
#     addMarkers -.-> control & latlng & popup/label
#     end
```


